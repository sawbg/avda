.TH "src/main.cpp" 3 "Wed Apr 20 2016" "The Automatic Vasospasm Detection Application" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/main.cpp \- 
.PP
Contains the main program\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <array>\fP
.br
\fC#include <cstdio>\fP
.br
\fC#include <cstdlib>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <map>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <string>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include 'definitions\&.hpp'\fP
.br
\fC#include 'fileio\&.hpp'\fP
.br
\fC#include 'process\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Contains the main program\&. 


.PP
\fBAuthor:\fP
.RS 4
Samuel Andrew Wisner, awisner94@gmail.com 
.RE
.PP
\fBBug\fP
.RS 4
Errant keystrokes (especially [ENTER]) can cause the next recording(s) to begin rather than waiting for the user to press [ENTER]\&. stdin must be flushed somehow in between recordings\&. 
.RE
.PP

.PP
Definition in file \fBmain\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "int main (intargc, char **argv)"
The main program for this project\&. It will detect avdaspasms over a period of days\&. 
.PP
Definition at line 31 of file main\&.cpp\&.
.PP
.nf
31                                 {
32     // Recorded audio buffer
33     float32* buffer = (float32*)std::malloc(BUFFER_SIZE);
34     bool cont = true;  // whether to continue in the recording loop
35     DataParams params[REC_COUNT];  // holds DataParam's from recordings
36     string filename = PatientName();  // generate name for patient's file
37     map<Side, DataParams> results;  // parameters by side
38 
39     // arecord command
40     const string recCommand = string("arecord -t raw -d ")
41         + to_string(DURATION) + string(" -D plughw:1,0 -f FLOAT -q -r ")
42         + to_string(SAMPLE_FREQ) + string(" ") + TEMP_FILE;
43 
44     // Recording
45     while(cont) {
46         for(uint8 i = 0; i < REC_COUNT; i++) {
47             // prompt
48             cout << "Press [ ENTER ] to begin analysis for the "
49                 << (i < REC_COUNT / 2 ? "left" : "right") << " side, depth #"
50                 << (((i >= REC_COUNT / 2) ? (i - REC_COUNT / 2) : i) + 1)
51                 << " ";
52             getchar();  // wait for ENTER to be pressed
53             cout << "Analyzing\&.\&.\&." << endl;
54 
55             system(recCommand\&.c_str());
56             usleep(DURATION*1000000 + 1500000);  // sleep DURATION + 1\&.5 seconds
57 
58             int file = open(TEMP_FILE\&.c_str(), O_RDONLY);  // open temp file
59             int retRead = read(file, buffer, BUFFER_SIZE);  // copy to buffer
60             close(file);  // close temp file
61             remove(TEMP_FILE\&.c_str());  // delete temp file
62 
63             // if something goes wrong reading the temp file, program exits
64             if(file < 0 || retRead < BUFFER_SIZE) {
65                 cerr << "An error occurred reading the doppler audio! "
66                     "The program will now exit\&." << endl;
67                 return ERROR;
68             }
69 
70             // process and store parameters
71             params[i] = process(buffer, SAMPLE_COUNT, SAMPLE_FREQ);
72             cout << "The analysis is complete\&." << endl << endl;
73         }
74 
75         // calculate averaged parameters
76         results[Side::Left] = average(params, REC_COUNT / 2);
77         results[Side::Right] = average(&params[REC_COUNT / 2], REC_COUNT / 2);
78 
79         cout << "Analysis is complete\&." << endl << endl;
80 
81         // print averaged side analysis
82         for(int i = 0; i < 2; i++) {
83             Side side = (Side)i;
84             cout << (side == Side::Left ? "[LEFT]" : "[RIGHT]") << endl;
85             cout << "Drop-off frequency: " << (uint16)(results[side]\&.freq + 0\&.5)
86                 << " Hz" << endl;
87             cout << "Average relative noiseband power: "
88                 << (sint16)(results[side]\&.noise - 0\&.5) << " dB" << endl <<endl;
89         }
90 
91         cont = results[Side::Left]\&.freq > MAX_DROP_FREQ
92             || results[Side::Right]\&.freq > MAX_DROP_FREQ;
93 
94         if(cont) {
95             cout << "An error in aquisition of the doppler audio has occurred! "
96                 "Ensure the connection from the doppler machine to this device "
97                 "is secure and the connection uninterruptable\&." << endl << endl;
98         }
99     }
100 
101     free(buffer);  // free buffer to prevent memory leak
102 
103     // examine likelihood of avdaspasm
104     map<Side, DataParams> baseParams = ReadParams(filename);
105     map<Side, bool> comparison;
106 
107     if(baseParams[Side::Left]\&.freq != 0 && baseParams[Side::Left]\&.noise != 0
108             && baseParams[Side::Right]\&.freq != 0
109             && baseParams[Side::Right]\&.noise != 0) {
110         for(uint8 i = 0; i < 2; i++) {
111             Side side = (Side)i;
112             float comp = fabs(results[side]\&.freq - baseParams[side]\&.freq) 
113                 * fabs(baseParams[side]\&.noise - results[side]\&.noise);
114             comparison[side] = comp > DET_THRESH;
115         }
116 
117         string which;
118 
119         if(comparison[Side::Left] && !comparison[Side::Right]) {
120             which = "The left";
121         } else if(!comparison[Side::Left] && comparison[Side::Right]) {
122             which = "The right";
123         } else if (comparison[Side::Left] && comparison[Side::Right]) {
124             which = "Both";
125         } else {
126             which = "Neither";
127         }
128         
129         cout << which << " side seems to show evidence of a vasospasm\&." << endl;
130     } else {
131         cout << "These values will be stored as the baseline parameters to "
132             "which all future parameters are compared\&." << endl;
133     }
134 
135     WriteParams(results, filename);
136 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for The Automatic Vasospasm Detection Application from the source code\&.
